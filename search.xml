<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[vue-localStorage本地存储代码]]></title>
      <url>%2F2017%2F02%2F22%2Fvue-localStoragee%2F</url>
      <content type="text"><![CDATA[代码如下：const STORAGE_KEY =’todos-vuejs’export default { fetch(){ //获取 return JSON.parse(window.localStorage.getItem(STORAGE_KEY||’[]’)) }, save(items){ //存储 window.localStorage.setItem(STORAGE_KEY,JSON.stringify(items)) }} 创建store.js，复制进去，在app.vue组件中import store from ‘./store’引入store.js模块使用如下： import store from ‘./store’ export default { name: ‘app’, data() { return { title: ‘this is a todu list’, items: store.fetch(), //获取items存储数据 newItem: “”, toggleFinished(item) { item.isFinished = !item.isFinished } } }, watch: { //观察items，然后将items数据存储 items: { handler(items) { store.save(items) }, deep: true } }, methods: { addItem() { this.items.push({ label: this.newItem, isFinished: false }) this.newItem = &quot;&quot; } } }]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[http协议状态码含义大全及故障解决]]></title>
      <url>%2F2017%2F02%2F20%2Fhttp-code%2F</url>
      <content type="text"><![CDATA[解决方法点击阅读全文当用户在防问Internet信息服务(IIS)的服务器上的内容时时，IIS服务器响应请求，会自动返回一个表示该请求的状态的数字代码,提供关于相关请求的状态信息。同样当搜索引擎蜘蛛在抓取的过程中，服务器也会将相关的http状态码反馈给搜索引擎，搜索引擎通过了解http状态代码, 可以更详细的分析日志中的访问情况。100 - 表示已收到请求的一部分，正在继续发送余下部分。101 - 切换协议。2xx - 成功 服务器成功地接受了客户端请求。200 - 确定。客户端请求已成功。201 - 已创建。202 - 已接受。203 - 非权威性信息。204 - 无内容。205 - 重置内容。206 - 部分内容。300 - 针对收到请求，服务器可执行多种操作。301 - 永久移动转移，请求的内容已永久移动其他新位置。302 - 临时移动转移，请求的内容已临时移动新的位置304 - 未修改。自从上次请求后，请求的内容未修改过。307 - 临时重定向。服务器目前从不同位置响应请求，但请求者应继续使用原有位置来进行以后的请求。400 - 错误的请求。401 -访问被拒绝。IIS定义了许多不同的401错误，它们指明更为具体的错误原因。这些具体的错代 码在浏览器中显示，但不在 IIS 日志中显示：401.1 - 登录失败。401.2 - 服务器配置导致登录失败。401.3 - 由于 ACL 对资源的限制而未获得授权。401.4 - 筛选器授权失败。401.5 - ISAPI/CGI 应用程序授权失败。401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。403 - 禁止访问：IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：403.1 - 执行访问被禁止。403.2 - 读访问被禁止。403.3 - 写访问被禁止。403.4 - 要求 SSL.403.5 - 要求 SSL 128.403.6 - IP 地址被拒绝。403.7 - 要求客户端证书。403.8 - 站点访问被拒绝。403.9 - 用户数过多。403.10 - 配置无效。403.11 - 密码更改。403.12 - 拒绝访问映射表。403.13 - 客户端证书被吊销。403.14 - 拒绝目录列表。403.15 - 超出客户端访问许可。403.16 - 客户端证书不受信任或无效。403.17 - 客户端证书已过期或尚未生效。403.18 - 在当前的应用程序池中不能执行所请求的 URL.这个错误代码为 IIS 6.0 所专用。403.19 - 不能为这个应用程序池中的客户端执行 CGI.这个错误代码为 IIS 6.0 所专用。403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。404 - 未找到请求的内容。404.0 - 未找到文件或目录。404.1 - 无法在所请求的端口上访问 Web站点。404.2 - Web 服务扩展锁定策略阻止本请求。404.3 - MIME 映射策略阻止本请求。405 - 用来访问本页面的 HTTP 谓词不被允许(方法不被允许)406 - 客户端浏览器不接受所请求页面的 MIME 类型。407 - 要求进行代理身份验证。412 - 前提条件失败。413 - 请求实体太大。414 - 请求 URI 太长。415 - 不支持的媒体类型。416 - 所请求的范围无法满足。417 - 执行失败。423 - 锁定的错误。500 - 服务器内部错误。500.12 - 应用程序正忙于在 Web 服务器上重新启动。500.13 - Web 服务器太忙。500.15 - 不允许直接请求 Global.asa.500.16 - UNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。500.18 - URL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。500.100 - 内部 ASP 错误。501 - 服务器无法完成请求的功能。502 - 服务器用作网关或代理服务器时收到了无效响应。502.1 - CGI 应用程序超时。502.2 - CGI 应用程序出错。503 - 服务不可用。这个错误代码为 IIS 6.0 所专用。504 - 网关超时。505 - HTTP 版本不受支持。 英文版：100：Continue101：Switching Protocols102：Processing200：OK201：Created202：Accepted203：Non-Authoriative Information204：No Content205：Reset Content206：Partial Content207：Multi-Status300：Multiple Choices301：Moved Permanently302：Found303：See Other304：Not Modified305：Use Proxy306：(Unused)307：Temporary Redirect400：Bad Request401：Unauthorized402：Payment Granted403：Forbidden404：File Not Found405：Method Not Allowed406：Not Acceptable407：Proxy Authentication Required408：Request Time-out409：Conflict410：Gone411：Length Required412：Precondition Failed413：Request Entity Too Large414：Request-URI Too Large415：Unsupported Media Type416：Requested range not satisfiable417：Expectation Failed422：Unprocessable Entity 423：Locked424：Failed Dependency500：Internal Server Error 501：Not Implemented502：Bad Gateway503：Service Unavailable504：Gateway Timeout505：HTTP Version Not Supported507：Insufficient Storage 常见的 HTTP 状态代码及其原因：200 - 成功。 IIS 已成功处理发送的请求。304 - 未修改。 客户端请求的内容已在其缓存中，内容自缓存以来尚未被修改过。客户端使用内容的缓存副本，而不从服务器下载内容。401.1 - 登录失败。 登录不成功，可能因为用户名或密码访问无效。401.3 - 服务列表对资源的限制而未获得授权。 表示存在NTFS权限问题。或者对试图访问的文件具备相应的权限，也可能发生此错误。403.1 - 执行访问被禁止。下面是导致此错误信息的两个常见原因：您没有足够的执行许可。例如，如果试图访问的 ASP 页所在的目录权限设为“无”，或者，试图执行的 CGI 脚本在的目录权限为“只允许脚本”，将出现此错误信息。若要修改执行权限，请在 Microsoft 管理控制台 (MMC)中右击目录，然后依次单击属性和目录选项卡，确保为试图访问的内容设置适当的执行权限。您没有将试图执行的文件类型的脚本映射设置为识别所使用的谓词(例如，GET 或 POST)。若要验证这一点，请在 MMC 中右击目录，依次单击属性、目录选项卡和配置，然后验证相应文件类型的脚本映射是否设置为允许所使用的谓词。403.2 - 读访问被禁止。验证是否已将IIS设置为允许对目录进行读访问。另外，如果您正在使用默认文件，请验证该文件是否存在。403.3 - 写访问被禁止。 验证IIS权限和NTFS限是否已设置以便向该目录授予写访问权。403.4 - 要求 SSL.禁用要求安全通道选项，或使用 HTTPS 代替 HTTP 来访问该页面。403.5 - 要求 SSL 128.禁用要求 128 位加密选项，或使用支持 128 位加密的浏览器以查看该页面。403.6 - IP地址被拒绝。服务器配置拒绝访问您目前的IP地址。403.7 - 要求客户端证书。您已把您的服务器配置为要求客户端身份验证证书，但您未安装有效的客户端证书。403.8 - 站点访问被拒绝。您已为您用来访问服务器的域设置了域名限制。403.9 - 用户数过多。与该服务器连接的用户数量超过了IIS设置的连接数。403.12 - 拒绝访问映射表。 您要访问的页面要求提供客户端证书，但映射到您的客户端证书的用户 ID 已被拒绝访问该文件。404 - 未找到。 发生此错误的原因是您试图访问的文件已被移走或删除。500 - 内部服务器错误。 造成500错误常见原因有：ASP语法出错、ACCESS数据库连接语句出错、文件引用与包含路径出错、使用了服务器不支持的组件如FSO等500.12 - 服务器错误:Web 服务器上的应用程序正在重新启动。 这表示您在 IIS 重新启动应用程序的过程中试图加载 ASP 页。刷新页面后，此信息即会消失。如果刷新页面后，此信息再次出现，可能是防病毒软件正在扫描 Global.asa 文件。500-100.ASP - ASP 错误。 如果试图加载的 ASP 页中含有错误代码，将出现此错误信息。若要获得更确切的错误信息，请禁用友好 HTTP 错误信息。默认情况下，只会在默认 Web 站点上启用此错误信息。502 - 网关错误。 如果试图运行的 CGI 脚本不返回有效的 HTTP 标头集，将出现此错误信息。 1、错误号401.1 - 未经授权：访问由于凭据无效被拒绝。由于用户匿名访问使用的账号(默认是IUSR机器名)被禁用，或者没有权限访问计算机，将造成用户无法访问。解决方案：(1)查看IIS管理器中站点安全设置的匿名帐户是否被禁用，如果是，请尝试用以下办法启用：控制面板-&gt;管理工具-&gt;计算机管理-&gt;本地用户和组，将IUSR机器名账号启用。如果还没有解决，请继续下一步。(2)查看本地安全策略中，IIS管理器中站点的默认匿名访问帐号或者其所属的组是否有通过网络访问服务器的权限，如果没有尝试用以下步骤赋予权限：开始-&gt;程序-&gt;管理工具-&gt;本地安全策略-&gt;安全策略-&gt;本地策略-&gt;用户权限分配，双击“从网络访问此计算机”，添加IIS默认用户或者其所属的组。注意：一般自定义 IIS默认匿名访问帐号都属于组，为了安全，没有特殊需要，请遵循此规则。 2、错误号401.2 HTTP 错误 401.2 - 未经授权：访问由于服务器配置被拒绝。原因：关闭了匿名身份验证解决方案：运行inetmgr，打开站点属性-&gt;目录安全性-&gt;身份验证和访问控制-&gt;选中“启用匿名访问”，输入用户名，或者点击“浏览”选择合法的用户，并两次输入密码后确定。 3、错误号：401.3 HTTP 错误 401.3 - 未经授权：访问由于 ACL 对所请求资源的设置被拒绝。原因：IIS匿名用户一般属于Guests组，而我们一般把存放网站的硬盘的权限只分配给administrators组，这时候按照继承原则，网站文件夹也只有administrators组的成员才能访问，导致IIS匿名用户访问该文件的NTFS权限不足，从而导致页面无法访问。解决方案：给IIS匿名用户访问网站文件夹的权限，方法：进入该文件夹的安全选项，添加IIS匿名用户，并赋予相应权限，一般是读、写。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端几个有用的网站]]></title>
      <url>%2F2017%2F02%2F18%2Fweb%E7%BD%91%E7%AB%99%2F</url>
      <content type="text"><![CDATA[网站csdn： http://www.csdn.net/看看里面的技术博客，有自己的APP，可以去下载；博客园：http://www.cnblogs.com/开源中国:https://www.oschina.net/码云:https://git.oschina.net/代码管理平台github:https://github.com/代码管理工具阮一峰的博客:http://www.ruanyifeng.com/blog/node社区:http://cnodejs.org/有自己的APP，定期会有座谈会其他活动processon免费在线作图:http://www.processon.com/diagrams开源图形组件:http://www.ichartjs.com/ 微信号前端大全，技术最前线]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端需要注意哪些SEO？]]></title>
      <url>%2F2017%2F02%2F18%2F%E5%85%B3%E4%BA%8Eseo%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
      <content type="text"><![CDATA[合理的title、description、keywords：三项的权重逐个减小，title值强调重点即可，重要关键词不可以出现超过2次，并且要靠前，不同页面的title要有所不同，description把页面内容高度概括，长度合适，不可过分的堆砌关键词，不同页面description有所不同，keywords列举出重要关键词即可。 语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页，避免使用没有语义的标签，如&lt;i&gt;&lt;/i&gt;等。 重要内容的HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取。 重要内容不要用js输出：爬虫不会执行js获取内容。 少用iframe：搜索引擎不会抓取iframe中的内容。 非装饰性图片必须加alt，进行图片的描述。 提高网站速度：网站速度是搜索引擎排序的一个重要的指标。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[20分钟教你使用hexo搭建github博客]]></title>
      <url>%2F2017%2F02%2F18%2Fgithub-hexo%2F</url>
      <content type="text"><![CDATA[注册Github账号这里我们就不多讲了，小伙伴们可以点击这里，进入官网进行注册。## 创建仓库登录账号后，在Github页面的右上方选择New repository进行仓库的创建。 在仓库名字输入框中输入：你想要的名字.github.io然后点击Create repository即可。 生成添加秘钥在终端（Terminal）输入： ssh-keygen -t rsa -C “Github的注册邮箱地址”一路Enter过来就好，待秘钥生成完毕，会得到两个文件id_rsa和id_rsa.pub，用带格式的记事本打开id_rsa.pub，Ctrl + a复制里面的所有内容，然后进入https://github.com/settings/ssh：将复制的内容粘贴到Key的输入框，随便写好Title里面的内容，点击Add SSH key按钮即可。 安装node.js点击进入node.js官网目前node.js有两个推荐版本，分为通用版和最新版，点击可直接进行下载。下载好后，按照既定的套路安装即可。 安装git这里说的git实则是为了使用git指令，我们的git使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，点击这里进入git的下载网站下载git的安装包。有人说，Mac自带git指令；也有人说安装xcode就可以使用git指令。因本人已经忘记当初自己是如何安装git的，所以大家根据自己的实际情况做决定吧。 安装配置hexo强调一下，这一步使我们搭建博客的核心，是重中之重。有能力的同学可以选择进入官网自行查看hexo官方文档，愿意听我叨叨的同学可以继续往下看。友情提示：hexo官网在翻墙的情况下便于顺利加载。接下来我们的操作都将在Terminal终端进行： 定位博客本地放置的路径$ cd 文件夹 强调：强烈建议不要 选择需要管理员权限才能创建文件（夹）的文件夹。 下载安装hexo$ npm install -g hexo-cli安装好hexo以后，在终端输入：$ hexo若出现下图，说明hexo安装成功： 初始化博客// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字$ hexo init &lt;folder&gt;// 进入博客文件夹，&lt;folder&gt;为文件夹的名称$ cd &lt;folder&gt;// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包$ npm install初始化博客以后，我们可以看到博客文件夹里的文件是这样的： 配置博客基于上一步，我们对博客修改相应的配置，我们用到_config.yml文件，下面是该文件的默认参数信息： # Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site title: # The title of your website subtitle: # The subtitle of your website description: # The description of your website author: # Your name language: # The language of your website timezone: # URL ## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos; url: http://yoursite.com/child root: / permalink: :year/:month/:day/:title/ permalink_defaults: # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: # Writing new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: true line_number: true auto_detect: false tab_replace: # Category &amp; Tag default_category: uncategorized category_map: tag_map: # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination ## Set per_page to 0 to disable pagination per_page: 10 pagination_dir: page # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: landscape # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: 看到这里，大家千万别被一长串英文给吓到了，我们实际上要修改的配置只有几项，拿我自己的配置，我们继续往下看： 1. 修改网站相关信息title: inerdstack subtitle: the stack of it nerds description: start from zero author: inerdstack language: zh-CN timezone: Asia/Shanghai language和timezone都是有输入规范的，详细可参考语言规范和时区规范。 注意：每一项的填写，其:后面都要保留一个空格，下同。 2. 配置统一资源定位符（个人域名）url: http: //inerdstack.com 对于root（根目录）、permalink（永久链接）、permalink_defaults（默认永久链接）等其他信息保持默认。 3. 配置部署deploy: type: git repo: https://github.com/iNerdStack/inerdstack.github.io.git branch: master 其中repo项是之前Github上创建好的仓库的地址，可以通过如下图所示的方式得到： branch是项目的分支，我们默认用主分支master。 ##发表一篇文章在终端输入： // 新建一篇文章 hexo new “文章标题”我们可以在本地博客文件夹source-&gt;_post文件夹下看到我们新建的markdown文件。用Markdown编辑器打开文件，我们可以看到这样的内容：我们写下： 你好，欢迎来到我的个人技术博客。保存后，我们进行本地发布： $ hexo server如下图：打开浏览器，输入： http: //localhost:4000/我们可以在浏览器端看到我们搭建好的博客和发布的文章：当然，我们也可以手动添加Markdown文件在source-&gt;_deploy文件夹下：其效果同样可以媲美hexo new &lt;article&gt;：但是毕竟我们目前发布的只有本机看得到，怎么让其他人看到我们写的博客呢？这时候我们来看看博客的部署。 我们只要在终端执行这样的命令即可： $ hexo deploy这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，如我的博客是：http://blog.fincio-fq.com/。本教程为博客搭建入门教程，大家可以根据自己的需求做进一步改进，如更换主题、删除文章等，详情参考官方文档。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[my-first-blog]]></title>
      <url>%2F2017%2F02%2F17%2Fmy-first-blog%2F</url>
      <content type="text"><![CDATA[前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我的博客]]></title>
      <url>%2F2017%2F02%2F17%2F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[你好，欢迎来到我的个人技术博客。]]></content>
    </entry>

    
  
  
</search>
